;; (setq debug-on-error t)

;;------------------------------------------------------------------------------
;; Package configuration
;;------------------------------------------------------------------------------
;; local configuration
(let ((local-settings "~/.emacs_local.el"))
  (when (file-exists-p local-settings)
    (load-file local-settings))
  )

;; Personnal script and non-melpa packages
(setq load-path (nconc '("~/.config/emacs/lisp") load-path))

;; Where to find extra packages
;; (local-elpa-packages may be defined by .emacs_local.el to disable this)
(require 'package)
(unless (boundp 'local-elpa-packages)
  (setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")))
  )

;; For ugly environment
;; (setq package-check-signature nil)

;; Bootstrap use-package (emacs < 19)
;; (package-initialize)
;; (unless (package-installed-p 'use-package)
;;   (package-refresh-contents)
;;   (package-install 'use-package))
;; (eval-when-compile (require 'use-package))

;; Auto-install missing packages
(require 'use-package-ensure)
(setq use-package-always-ensure t)

;;check all packages are up-to-date
(defun my/update-packages ()
  (interactive)
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe)
    )
  )

;;------------------------------------------------------------------------------
;; Look & Theme
;;------------------------------------------------------------------------------
;; Hide start-up message
(setq inhibit-startup-message t)
(tool-bar-mode -1)

;; title
(setq frame-title-format (quote ("emacs - " (buffer-file-name "%f" ("%b")))))

;; Bottom bar
(line-number-mode t)
(column-number-mode t)
(which-function-mode 1)

;; Disable beep
(setq ring-bell-function 'ignore)

;; Theme
;;(set-default-font "7*14")
;(set-foreground-color "gray")
;(set-background-color "black")
;(set-cursor-color "darkslateblue")
;;(set-face-background 'modeline "darkslateblue")
;;(set-face-foreground 'modeline "lemonchiffon")
(load-theme 'modus-vivendi :no-confirm)

;; font-lock-mode (that may be replaced by tree-sitter when supported)
(global-font-lock-mode 'on)


;;------------------------------------------------------------------------------
;; Editor behavior
;;------------------------------------------------------------------------------
;; Text mode by default
(setq initial-major-mode 'text-mode)
(setq default-major-mode 'text-mode)

;; Unix-mode
(prefer-coding-system 'utf-8-unix)
(setq coding-system-for-read 'utf-8-unix)
(setq coding-system-for-write 'utf-8-unix)
(defalias 'dos2unix 'delete-trailing-whitespace)

;; Never use tab but spaces (may be overitted by modes)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

;; No automatic new-line
(setq next-line-add-newlines nil)

;; Disable backup files
(setq make-backup-files nil)

;;line size for auto-fill-mode
(setq-default fill-column 80)

;; Ignore warning on large modifications witch can not be stored for undo
(setq font-lock-maximum-size 1256000)

;; mouse Copy/paste
(setq mouse-drag-copy-region t)
(setq mouse-yank-at-point t)

;; Display parenthesis
(show-paren-mode t)

;;Ctrl Shift + direction : moving by block
(global-set-key [(ctrl shift right)] 'forward-sexp)
(global-set-key [(ctrl shift left)] 'backward-sexp)

;; Delete trailing whitespaces when saving
(add-hook 'before-save-hook #'delete-trailing-whitespace)

;;------------------------------------------------------------------------------
;; Commands behavior
;;------------------------------------------------------------------------------
;; Prevent Custom to write to .emacs: write them to another file
(setq custom-file "~/.emacs.d/custom.el")

;;Ctrl X Ctrl l: goto line
(global-set-key [(ctrl x)(ctrl l)] 'goto-line)

;; Workaround for Ctrl-c under windows console
(global-set-key [24 pause] (quote save-buffers-kill-terminal))

;; Allow *case region
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; Command completion
(icomplete-mode)


;;------------------------------------------------------------------------------
;; Tools
;;------------------------------------------------------------------------------
;; Spell-ckecking
(use-package ispell
  :defer t
  :config
  (setq ispell-program-name "aspell")
  (setq ispell-dictionary "american")
  )
(use-package flyspell
  :defer t
  :init
  (add-hook 'flyspell-mode-hook 'flyspell-buffer)
  )

;;ido folder browsing
(use-package ido
  :config
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  :init
  (ido-mode t)
  :bind ("C-x C-b" . ido-switch-buffer)
  )

;; Better buffer names
(use-package uniquify
  :ensure nil  ; workaround issue with use-package-ensure for build-in packages
  :config
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets))


;;------------------------------------------------------------------------------
;; eglot IDE
;; activate with M-x eglot
;; eglot is just the client. A server is needed. For node/typescript, install globally:
;; npm i -g typescript-language-server
;; npm i -g typescript
;;------------------------------------------------------------------------------
(use-package eglot
  :init
  (setq project-vc-extra-root-markers '("tsconfig.json")))

(use-package company
  :after eglot
  :hook (eglot-managed-mode . company-mode)
)

(use-package company-box
  :hook (company-mode . company-box-mode)
  :bind ("C-<tab>" . company-complete)
  )

(use-package tramp
  :ensure nil
  :config
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
  )

;;------------------------------------------------------------------------------
;; Languages specific
;;------------------------------------------------------------------------------
;; C/C++ mode
(c-set-offset 'substatement-open '0)
(c-set-offset 'brace-list-open '0)
(c-set-offset 'statement-case-open '0)
(c-set-offset 'inextern-lang 0)
(c-set-offset 'inline-open 0)
;;(setq c-default-style "linux" c-basic-offset 2)

;; XML mode
(use-package nxml-mode
  :ensure nil  ; workaround issue with use-package-ensure for build-in packages
  :mode "\\.xml"
  :mode "\\.xsd"
  :mode "\\.html"
  :mode "\\.htm"
  :mode "\\.xhtml"
  :config
  (setq nxml-child-indent 2)
  (setq nxml-auto-insert-xml-declaration-flag t)
  (setq nxml-slash-auto-complete-flag t))


;; yaml mode
(use-package yaml-mode
  :mode (".yaml\\'")
  :hook
  (yaml-mode . yaml-mode-outline-hook)
  :init
  (defun yaml-outline-level ()
	"Return the outline level based on the indentation, hardcoded at 2 spaces."
	(s-count-matches "[ ]\\{2\\}" (match-string 0)))
  (defun yaml-mode-outline-hook ()
	(outline-minor-mode)
	(setq outline-regexp "^\\([ ]\\{2\\}\\)*\\([-] \\)?\\([\"][^\"]*[\"]\\|[a-zA-Z0-9_-]*\\): *\\([>|]\\|&[a-zA-Z0-9_-]*\\)?$")
	(setq outline-level 'yaml-outline-level))
  )

(use-package shell-script-mode
  :ensure nil  ; workaround issue with use-package-ensure for build-in packages
  :mode "bashrc"
  :mode "profile"
  )

;; groovy mode
(use-package groovy-mode
  :mode "\\.groovy\\'"
  :mode "jenkinsfile"
  )


;; asciidoc mode
(use-package adoc-mode
  :mode "\\.adoc\\'"
  )

;; markdown mode
(use-package markdown-mode
  :mode "\\.md\\'"
  )

;; powershell mode
(use-package powershell
  :mode ("\\.ps1\\'" . powershell-mode)
  )

;; cmake mode
(use-package cmake-mode
  :mode "CMakeLists.txt"
  :mode "\\.cmake\\'"
  )

;; ninja mode
(use-package ninja-mode
  :mode "\\.ninja\\'"
  )

;; CSV
(use-package csv-mode
  :mode "\\.csv\\'"
  :config
  (custom-set-variables
   '(csv-separators (quote (";")))
   '(csv-invisibility-default nil)
   )
  )

;; PHP
(use-package php-mode
  :mode "\\.php\\'")


;; Typescript & react TSX
(use-package tsx-ts-mode
  :ensure nil  ; workaround issue with use-package-ensure for build-in packages
  :mode "\\.js\\'"
  :mode "\\.cjs\\'"
  :mode "\\.ts\\'"
  :mode "\\.tsx\\'"
  )

;; JSON
(use-package json-ts-mode
  :ensure nil  ; workaround issue with use-package-ensure for build-in packages
  :mode "\\.json\\'"
  )

;; Docker
(use-package dockerfile-ts-mode
  :ensure nil  ; workaround issue with use-package-ensure for build-in packages
  :mode "/Dockerfile\\'"
  )

;; Flatbuffers
(use-package flatbuffers-mode
  :mode "\\.fbs\\'"
  )


;;------------------------------------------------------------------------------
;; Useful interactive functions
;;------------------------------------------------------------------------------
;; Invalid char lookup
(defun my/find-next-unsafe-char (&optional coding-system)
  "Find the next character in the buffer that cannot be encoded by
coding-system. If coding-system is unspecified, default to the coding
system that would be used to save this buffer. With prefix argument,
prompt the user for a coding system."
  (interactive "Zcoding-system: ")
  (if (stringp coding-system) (setq coding-system (intern coding-system)))
  (if coding-system nil
    (setq coding-system
          (or save-buffer-coding-system buffer-file-coding-system)))
  (let ((found nil) (char nil) (csets nil) (safe nil))
    (setq safe (coding-system-get coding-system 'safe-chars))
    ;; some systems merely specify the charsets as ones they can encode:
    (setq csets (coding-system-get coding-system 'safe-charsets))
    (save-excursion
      ;;(message "zoom to <")
      (let ((end  (point-max))
            (here (point    ))
            (char  nil))
        (while (and (< here end) (not found))
          (setq char (char-after here))
          (if (or (eq safe t)
                  (< char ?\177)
                  (and safe  (aref safe char))
                  (and csets (memq (char-charset char) csets)))
              nil ;; safe char, noop
            (setq found (cons here char)))
          (setq here (1+ here))) ))
    (and found (goto-char (1+ (car found))))
    found))

;; Convert semi-colon separated region to a table
(defun my/icd-region ()
  (interactive)
  (table-capture (region-beginning) (region-end) ";")
  )

;; Sort no-case function
(defun my/sort-lines-nocase ()
  (interactive)
  (let ((sort-fold-case t))
    (call-interactively 'sort-lines)))
