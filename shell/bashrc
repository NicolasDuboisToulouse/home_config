# -----------------------------------------------------------------------------
# Console
# -----------------------------------------------------------------------------
# Emacs mode
set -o emacs

# Give rights to group
umask 002


# -----------------------------------------------------------------------------
# Alias
# -----------------------------------------------------------------------------

# ls
alias ls='ls --color=auto'
alias ll="ls -l"

# Prevent mistakes
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'


# xterm
if [ "x$OS" = "xWindows_NT" ]; then
    alias xterm="/c/Program\ Files/Git/git-bash.exe"
else
    alias xterm='xterm -sb -sl 1000 -bg black -fg white -e /bin/bash'
fi


# -----------------------------------------------------------------------------
# Prompt
# -----------------------------------------------------------------------------
__snoopy_set_prompt_command()
{
    local color_user="\033[1;35m"
    local color_txt="\033[0;0m"
    local color_host="\033[1;32m"
    local color_path="\033[1;34m"
    local color_git="\033[1;36m"

    local term_title="\[\e]2;\u@\h:\W\a\]"


    # Look for __git_ps1 function
    if ! type -t __git_ps1 > /dev/null; then
        if [ -e  ~/.config/git/git-prompt.sh ]; then
            source  ~/.config/git/git-prompt.sh
        fi
    fi

    if type -t __git_ps1 > /dev/null; then
        __git_ps1 "${term_title}${color_user}\u${color_txt}@${color_host}\h${color_txt}:${color_path}\w${color_git}" "${color_txt}\r\n$ "
    else
        export PS1="${term_title}${color_user}\u${color_txt}@${color_host}\h${color_txt}:${color_path}\w${color_txt}\r\n>"
    fi
}

export PROMPT_COMMAND=__snoopy_set_prompt_command


# -----------------------------------------------------------------------------
# Environement
# -----------------------------------------------------------------------------

# if environement is set, we needn't to set it again
# (variables are preserved for new shell wich is not the case for alias and functions)
[ ! -z $SNOOPY_ENV_IS_SET ] && return
export SNOOPY_ENV_IS_SET=1

#OS var set on Windows but not on Linux
[ -z $OS ] && export OS=Linux

# Cots configuration (depend on location)
if [ -e /c/local/strawberry/perl ]; then
    PERL_HOME=/c/local/strawberry/perl
    PATH=${PERL_HOME}/bin:${PERL_HOME}/site/bin:$PATH
fi

if [ -e /d/Softs/Install/strawberry/perl ]; then
    PERL_HOME=/d/Softs/Install/strawberry/perl
    PATH=${PERL_HOME}/bin:${PERL_HOME}/site/bin:$PATH
fi

if [ -e /home/ioland/REF/COTS/SCMSTACK/V1/scm_env ]; then
    . /home/ioland/REF/COTS/SCMSTACK/V1/scm_env
fi

if [ -e /home/aspic_de/COTS/JDK/jdk1.8.0_65-64b ]; then
    export JAVA_HOME=/home/aspic_de/COTS/JDK/jdk1.8.0_65-64b
    PATH=$JAVA_HOME/bin:$PATH
fi

export PATH

# Ls colors (overwrite default color for directories and links)
[ ! -e ~/.dircolors ] && (dircolors -p; echo; echo 'DIR 01;36'; echo 'LINK 01;33') > ~/.dircolors
eval `dircolors ~/.dircolors`


# SSH that force bash and forward display from windows host (ssh -X or -Y not working)
function wssh () {
    host=$1
    user=$(whoami | awk '{print tolower($0)}')
    if [ -z $host ]; then
        echo -n "Host: "
        read host
    fi

    display=$DISPLAY

    if [ $OS = "Windows_NT" ]; then
        display=$(ipconfig | grep IPv4 | grep -v '192.168' | awk '{ print $16 }')":0"
    fi

    ssh $user@$host -t "export DISPLAY=$display; bash"
}
